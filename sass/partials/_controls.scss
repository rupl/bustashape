//------------------------------------------------------------------------------
// Shape editor
//------------------------------------------------------------------------------

.controls {
  width: 100vw;
  height: 300px;
  overflow: hidden;
  padding: .5em;
  position: fixed;
  top: calc(100% - 64px);
  z-index: 1100;
  user-select: none;

  color: #fff;
  opacity: 1;
  transition: .5s ease-in-out;
  transition-property: width, top;
  background: rgba(#eee, .8);
  border-top: 4px solid rgba(#000, .1);

  // Setting this by default means we don't have to handle special cases when
  // reading the transform in JS. Hammer will transform this element based on
  // drag event handlers for the controls.
  transform: translateY(0px);

  // When backdrop filter is present, make the controls look fancier using the
  // CSS background blurring inspired by iOS.
  //
  // @see http://caniuse.com/#feat=css-backdrop-filter
  .backdropfilter & {
    background: rgba(#ddd, .36);
    -webkit-backdrop-filter: blur(24px);
    backdrop-filter: blur(24px);
  }

  //
  // Flexbox props
  //
  display: flex;
  flex-flow: row wrap;
  text-align: center;

  .divider {
    width: 100vw;
    height: 0;
    margin: 0 -.5em; // counter the form padding
    padding: 0;
    border: 0;
    border-top: 4px solid rgba(#000, .1);
  }

  // Each visible shape is a preset.
  .preset {
    flex: 1 0 25%;
    height: 24px;
    transform-style: preserve-3d; // for advanced button effects
    perspective: 100px;
  }

  // Fieldsets
  //
  // Each property is now in a fieldset so we can style the groups of inputs
  // more easily.
  fieldset {
    width: 100vw;
    border: 0;
    margin-top: 1em;

    legend {
      display: none;
      color: #555;
      font-size: .75em;
      padding-bottom: 1em;
      text-align: center;
      text-transform: uppercase;
      text-shadow: 1px 1px 0 rgba(#fff, .6);
    }
  }

  //
  // Preset shapes
  //
  .fieldset--shape {
    $size: 36px;

    input[type="radio"] {
      display: none;
    }

    label {
      &::after {
        display: inline-block;
        content: ' ';
        background: #000;
        opacity: .8;
        margin: 0 4%;
      }
    }

    label[for="shape--square"] {
      &::after {
        width: $size;
        height: $size;
      }
    }
    label[for="shape--circle"] {
      &::after {
        width: $size;
        height: $size;
        border-radius: 50%;
      }
    }
    label[for="shape--triangle"] {
      &::after {
        width: $size;
        height: $size;
        border-left: ($size / 2) solid transparent;
        border-right: ($size / 2) solid transparent;
        border-bottom: $size solid #000;
        background-color: transparent;
      }
    }
    label[for="shape--rectangle"] {
      &::after {
        width: $size * 2;
        height: $size;
      }
    }
  }

  .fieldset--opacity {
    input {
      width: 100%;
      max-width: 320px;
    }
  }

  // General button styles
  button {
    font-size: 1.2em;
    width: 1.8em;
    height: 1.5em;
    margin: 0 .25em;
    padding: .2em .3em;
    border: none;
    border-radius: 3px;
    background: unset;
    overflow: hidden;
    cursor: pointer;
    vertical-align: middle;
    z-index: 100;
  }

  #save {
    cursor: pointer;
    color: white;
    text-decoration: none;
    position: absolute;
    top: 16px;
    right: 16px;
  }

  //
  // Animations for drawer opening/closing.
  //
  &.up-fast {
    animation: slide-up .2s ease-out 1;
    animation-fill-mode: forwards;
  }
  &.down-fast {
    animation: slide-down .2s ease-out 1;
    animation-fill-mode: forwards;
  }
  &.up-slow {
    animation: slide-up .75s ease-out 1;
    animation-fill-mode: forwards;
  }
  &.down-slow {
    animation: slide-down .75s ease-out 1;
    animation-fill-mode: forwards;
  }
}

@keyframes slide-down {
  100% {
    transform: translateY(0px);
  }
}

@keyframes slide-up {
  100% {
    transform: translateY(-236px);
  }
}

@keyframes button-pulse {
  50% {
    background-color: rgba(255, 255, 255, .2);
  }
}
